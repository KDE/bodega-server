#!/usr/bin/env node

var fs = require('fs');
var prompt = require('prompt');
var exec = require('child_process').exec;


//those are the files that we use for the setup of the database
var sql_commands = ['core.sql', 'core.plsql', 'api.sql', 'search_en.plsql', 'defaultdata.sql', 'actionconf.plsql', 'rankings.sql', 'purchasing.plsql', 'payments_stripe.sql', 'upload.sql', 'vivaldi.sql'];
var test_sql_commands = ['testdata.sql'];

var run = function(command, fn) {
    var output = '';
    exec(command, function (error, stdout, stderr) {
        output += stdout;
        output += stderr;
        if (error !== null) {
            output += error;
        }
        if (fn !== undefined) {
            fn(output.trim());
        }
    });
}

function series(list, fn)
{
    //this is out command for the sql files
    var command_list = list;
    var sql_command = function(fileName) {
        var command = "PGOPTIONS='--client-min-messages=warning' psql -q -d " + config.database.name +
                      ' -U ' + config.database.user + ' -f ';
        if (fileName.indexOf(sql_dir) === -1) {
            command += sql_dir
        }
        command += fileName + ' 1>/dev/null';

        return command;
    };

    function next() {
        var element = command_list.shift();
        if (element === undefined) {
            fn();
        } else {
            element = element.toString();
            var command = '';
            //the element is a sql file so make it a full command
            if (element.substr(element.length - 4, 4) === '.sql' ||
                element.substr(element.length - 6, 6) === '.plsql') {
                command = sql_command(element);
            } else {
                //its already a command
                command = element;
            }
            console.log(element);
            //console.log(command);
            run(command, function(result) {
                 var res = result.trim();
                 if (res.length > 0) {
                    console.log(result.trim());
                 }
                 next();
            });
        }
    }
    next();
}

function updateLogFilename()
{
    return sql_dir + '/updates/completed';
}

function listUpdateFiles()
{
    var updateLog = updateLogFilename();
    var fileList = fs.readdirSync(sql_dir + '/updates');
    var completedUpdatess = fs.existsSync(updateLog) ?
        fs.readFileSync(updateLog, { encoding: 'utf8' } ).split("\n") :
        [];
    var files = [];

    for (var i in fileList) {
        var filename = "updates/" + fileList[i];
        if (filename.substr(filename.length - 4, 4) === '.sql' &&
            completedUpdatess.indexOf(filename) === -1) {
            files.push(filename);
        }
    }

    return files;
}

function confirm(task, fn)
{
    prompt.start();
    var schema = {
        properties: {
            confirm: {
                description: 'Are you sure you wish to ' + task + '? (yes/no)',
                type: 'string',
                required: true
             }
        }
    };

    prompt.message = '';
    prompt.delimiter = '';
    prompt.get(schema,
               function (err, result) {
                   if (!err && result.confirm.toUpperCase() == 'YES') {
                      fn();
                   }
                });
}

function printUsage()
{
    console.log('Usage: do_sql <config.json filepath> <sql directory filepath> <command>');
    console.log('Commands include: ');
    console.log('    setup: creates the database');
    console.log('   update: applies pending updates');
    console.log('     test: this removes all data from the database and loads the test suite data');
}

var config_json = process.argv[2];
var sql_dir = process.argv[3];
var sql_argument = process.argv[4];

if (sql_dir === undefined || config_json === undefined || sql_argument === undefined) {
    printUsage();
    return;
}

var config = JSON.parse(fs.readFileSync((config_json), 'utf8'));

if (sql_argument == 'update') {
    confirm('run updates on the database', function()
    {
        console.log('Updating the database schema');
        console.log('----------------------------');
        //those are the migration files which we will use in order to migrate and update successfully the db
        var updates = listUpdateFiles();
        if (updates.length < 1) {
            console.log('No updates to apply. Check the updates/completed file if you believe this is in error.');
        } else {
            console.log('Applying these updates ' + updates);
            series(updates, function() {
            fs.appendFileSync(updateLogFilename(), "\n" +
                              updates.join("\n"),
                              { encoding: 'utf8' } );
            console.log('----------------------------');
        });
        }
    });
} else if (sql_argument == 'setup') {
    confirm('drop the existing database (if any) and load the database from scratch', function()
    {
        console.log('Creating the database schema');
        console.log('----------------------------');
        //console.log(sql_commands);
        try {
            fs.unlinkSync(updateLogFilename());
        } catch (e) {
        }

        sql_commands.unshift('createdb -U postgres -O ' + config.database.name + ' ' + config.database.name);
        sql_commands.unshift('dropdb -U postgres ' + config.database.user);
        //console.log(sql_commands);
        series(sql_commands, function() {
            try {
                fs.appendFileSync(updateLogFilename(), "\n" +
                listUpdateFiles().join("\n"),
                { encoding: 'utf8' } );
            } catch (e) {
                console.log('Could not write to the update log in sql/completed');
            }

            console.log('----------------------------');
        });
    });
} else if (sql_argument == 'testdata') {
    confirm('delete all data from the database and load the test suite data', function()
    {
        console.log('Populating the database with testing data');
        console.log('-----------------------------------------');
        series(test_sql_commands, function() {
            console.log('-----------------------------------------');
        });
    });
} else {
    printUsage();
    return;
}

