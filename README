Asset Importers
===============
These small command line, Qt-based helpers automate the processes of getting external
catalogs and importing them locally.

Configure and install with:

cmake -DBODEGA_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=/opt/something /bodega/src

Server
======
This directory contians the content distribution server. It is based on node.js, postgresql and redis.

Node modules are installed using npm from within the server directory and the server can be started with
the main.sh file.

All commands that follow are done relative to the server directory.

## Database setup

* Start the redis daemon (e.g.: /etc/init.d/redis start)
* Start the postgresql daemon (e.g.: /etc/init.d/postgresql start)
* Create a postgresql user (e.g. bodega). It does not need to be a super user or be able to create
  databases.
* Run the setup.sh file in the sql directory as the postgres user. Note that it assuesm the name of the
  postgres user is bodega. If you use a different user name or database name, this script will need
  to be tweaked.

## Node setup and module Installation

   $ npm install

Move config.sample.json to config.json and update/edit it if necessary.

## Configuration

Copy the config.sample.json file to config.json and customize the values within it. The configuration
keys should be self-explanatory, and if you do not use a given service (e.g. S3 or Stripe) you can
safely ignore those blocks completely.

Most (often, all) of the default settings should work.

## Quick Start

   $ ./main.sh

You can also start it directly with:

   $ node app.js

## Updating

    $ npm update

Updates to sql schemas, if necesary, will be found in in sql/updates with file names ordered in a
numerically ascending sequence.

## Testing

To set up the server for running the tests, connect to the database with psql and load the sampledata.sql
and testdata.sql files.

To run the test suite, go into the server directory and run:

   $ make test

You can also run individual test suites with:

   $ make test/<testname>

<testname> is the name of the .js file in the tests/ directory minus the .js extenstion, so for
example:

   $ make test/upload

## Checking the code

We use jshint to check for common js errors and style issues.
Use a simple.

   $ make check

The configuration is stored in the .jshintrc file and the files which should be skipped are stored in the .jshintignore .

