System Requirements
===================
The Bodega server requires the following software to be installed on the system prior to use:

* node.js (0.10 or better)
* PostgreSQL (v9.1 or better)
* Redis (used for user session data)
* GraphicsMagick (used to manipulate images uploaded for icons, covers, previews, etc)

Server Setup
============
This directory contians the content distribution server. It is based on node.js, postgresql and redis.

Node modules are installed using npm from within the server directory and the server can be started with
the main.sh file.

All commands that follow are done relative to the server/ directory.

## Database setup

* Start the redis daemon (e.g.: /etc/init.d/redis start)
* Ensure that postgresql is configured to retrieve dates in UTC by default. This is done by
  editing postgresql.conf and ensuring "timezone = 'utc'" (it defaults to "posixrules")
* Start the postgresql daemon (e.g.: /etc/init.d/postgresql start)
* Create a postgresql user (e.g. bodega). It does not need to be a super user or be able to create
  databases.
* Run the setup.sh file in the sql directory as the postgres user. Note that it assumes the name of the
  postgres user is bodega. If you use a different user name or database name, this script will need
  to be tweaked.

## Node setup and module Installation

The npm application takes care of install all the required modules, which are listed in the
package.json file. Simply run:

   $ npm install

If you are planning on extending bodega-server, then running the test suite will be a necessity and
you will want to install the development dependencies as well:

   $ npm install

## Configuration

Copy the config.json.sample file to config.json and customize the values within it. The configuration
keys should be self-explanatory, and if you do not use a given service (e.g. S3 or Stripe) you can
safely ignore those blocks completely.

Most (often, all) of the default settings should work.

## Quick Start

   $ cd server
   $ ./main.sh

You can also start it directly with:

   $ node app.js

though that is generally not recommended. Using the main.sh: it is a future proof habit to get into.

To start it in production mode, do:

    $ ./main.sh production

## Updating

    $ npm update

Updates to sql schemas, if necesary, will be found in in sql/updates with file names ordered in a
numerically ascending sequence.

To update the database when changes occur, do:

    $ cd server
    $ make update_sql

This will run any update scripts in sql/updates/ that have not yet been run. To run a script again,
either load it manually via the psql command into the bodega database or edit (or remove) the
sql/updates/completed file which records which updates have been applied. Errors while running
updates are usually fine and simply mean that the changes were already found in the database.

## Testing

To set up the server for running the tests, first ensure that you have a database set up just for
testing as the tests rely on a test data set which replaces whatever data may otherwise be in the
database. In other words: do not run the tests on a production system and expect things to go well.

To load the testing data set:

    $ cd server
    $ make test_sql

Then run the test suite:

    $ make test

You can also run individual test suites with:

    $ make test/<testname>

<testname> is the name of the .js file in the tests/ directory minus the .js extenstion, so for
example:

   $ make test/upload

## Checking the code

We use jshint to check for common js errors and style issues.
Use a simple.

   $ make check

The configuration is stored in the .jshintrc file and the files which should be skipped are stored in the .jshintignore .

Asset Importers
===============
These small command line, Qt-based helpers automate the processes of getting external
catalogs and importing them locally.

Configure and install with:

cmake -DBODEGA_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=/opt/something /bodega/src


