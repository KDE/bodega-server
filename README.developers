Thinking of extending Bodega with more features, fixing bugs in it or improving
performance? Excellent!

# Community

Other Bodega developers can be found via the following means online:

    active@kde.org: Mailing list for discussion of Plasma Active, including Bodega
    #bodega on irc.freenode.net

We use http://bugs.kde.org to track feature and bug reports under the Bodega product
and http://reviewboard.kde.org to review patches using the bodega review group.

# A note on quirks when not running in production mode

When the server is not run in production mode, no emails are sent; rather, they
are logged. So all account activations and permissions for partners need to be
manually completed in the database. Usually it's a simple matter of things like:

    bodega# update users set active = true;

and

    bodega# update partners set publisher = true, distributor = true;

# Development Workflow

The goal is simple: the master branch should always be usable to host a Bodega
instance. To reach that goal, the following workflow has been adopted.

## The almighty test suite

All new code in Bodega must be accompanied by a unit test. You will find the test
suite in server/test/ and it can be run by:

    $ cd server/
    $ make test

Before code can be merged into master, the test suite must pass in its entirety.

The tests relies on the test data set which can be loaded with:

    $ make test_sql

## Changes to the database

All changes affecting the database schema or default data set must appear both
in the relevant files in the sql/ directory as well as in an update file in
sql/updates. The update files are commands that will be run on the PostgreSQL
server. This allows installed systems to update to new versions in an incremental
fashion without database drama.

## Branches are the new black

All new feature development and all but the most trivial of bug fixes must be done
in a branch. The branch should be named descriptively so it is obvious what it
contains. Creating a branch is easy:

    $ git checkout -b aGreatNewFeature

When ready, pushing that branch to the server is equally easy:

    $ git push --set-upstream origin aGreatNewFeature

When it is ready to be considered for merging into master, drop an email to
active@kde.org noting this is the case. You can also post a review request at:

    http://reviewboard.kde.org

If you need a developer account to push to git.kde.org, visit
http://identity.kde.org to set up an account and ask one of the other Bodega
developers for a recommendation for an account upgrade to commiter status.

Of course, we use git which is inherently decentralized, so you can also
work in a clone hosted elsewhere if that's more your speed.

## The stable branch and bug fixes

Periodically, we create a new stable branch. The nameing of these branches follows
the following convention: "vX.Y". The first stable branch was v0.1, for instance.

The stable branch is used for bug fixing. While topic branches are used for larger
change sets (and always for new features, regardless of their size), bug fixes
which are containable in a small number of isolated commits should be done in the
most recent stable branch first.

If the bug was related to either input handling or affects output in any way,
a test should be added to the test suite to both prove the bug is fixed and to
prevent future regressions.

All bug fix commits should have the following lines in their commit messagse:

    BUG:<number>
    FIXEDIN:<stable branch>

Once the bug fix is confirmed, it must be merged into master. Cherry-picking is
discouraged for this.

# Documentation

All new API or changes to existing API must be documented. The API documentation
is kept in server/doc/bodega.json

Keep the top level headings alphabetized, and keep methods grouped within the
headings in a logical fashion.

# Coding Style

We use the [KDE Library coding style](http://techbase.kde.org/Policies/Kdelibs_Coding_Style)
adapted for Javascript. In brief, that means:

    * Indentation: 4 spaces (no tabs)
    * All blocks gets {}, even one liners
    * CamelCase is in effect

Consistency is of vital importance to future maintenance of the codebase
and code that does not follow the coding style will not be accepted into master.

## Checking if things are Good

The codebase should also pass the pedantic style checker which can be launched
thusly:


    $ cd server/
    $ make check

We use JSHint, documentation for which can be found here: http://www.jshint.com
