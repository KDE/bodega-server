#!/usr/bin/env node

var fs = require('fs');
var exec = require('child_process').exec;


//those are the files that we use for the setup of the database
var sql_commands = ['bodega.sql', 'core.plsql', 'search_en.plsql', 'defaultdata.sql', 'actionconf.plsql', 'rankings.sql', 'purchasing.plsql', 'payments_stripe.sql', 'upload.sql', 'vivaldi.sql'];
var test_sql_commands = ['sampledata.sql'];

var run = function(command, fn) {
    var output = '';
    exec(command, function (error, stdout, stderr) {
        output += stdout;
        output += stderr;
        if (error !== null) {
            output += error;
        }
        if (fn !== undefined) {
            fn(output.trim());
        }
    });
}

function series(list) {
    //this is out command for the sql files
    var command_list = new Array(list);
    var sql_command = function(fileName) {
        var command = 'psql -d ' + config.database.name + ' -U ' + config.database.user + ' -f ';
        if (fileName.indexOf(sql_dir) === -1) {
            command += sql_dir
        }
        command += fileName + ' 1>/dev/null';

        return command;
    }

    function next() {
        var element = command_list.shift();
        if (element !== undefined) {
            element = element.toString();
            var command = '';
            //the element is a sql file so make it a full command
            if (element.substr(element.length - 4, 4) === '.sql' ||
                element.substr(element.length - 6, 6) === '.plsql') {
                command = sql_command(element);
            } else {
                //its already a command
                command = element;
            }
            run(command, function(result) {
                 console.log(result.trim());
                 next();
            });
        } else {
            console.log('====End!!!====');
        }
    }
    next();
}

var config_json = process.argv[2];
var sql_dir = process.argv[3];
var sql_argument = process.argv[4];

if (sql_dir === undefined || config_json === undefined || sql_argument === undefined) {
    console.log('Missing arguments');
    console.log('This scripts needs as arguments <config.json filepath> <sql directory filepath> <sql command>');
    return;
}

var config = JSON.parse(fs.readFileSync((config_json), 'utf8'));

if (sql_argument == 'update') {
    console.log('====Updating the database schema====');
    //those are the migration files which we will use in order to migrate and update successfully the db
    var updates_done_fn = sql_dir + '/updates/completed';
    var update_files = fs.readdirSync(sql_dir + '/updates');
    var done_updates = fs.existsSync(updates_done_fn) ? fs.readFileSync(updates_done_fn, { encoding: 'utf8' } ).split("\n") : [];
    var update_sql_commands = [];

    for (var i in update_files) {
        var filename = "updates/" + update_files[i];
        if (filename.substr(filename.length - 4, 4) === '.sql' && done_updates.indexOf(filename) === -1) {
            update_sql_commands.push(filename);
        }
    }

    if (update_sql_commands.length < 1) {
        console.log('No updates to apply. Check the updates/completed file if you believe this is in error.');
    } else {
        console.log('Applying these updates ' + update_sql_commands);
        series(update_sql_commands);
        fs.appendFileSync(updates_done_fn, "\n" + update_sql_commands.join("\n"), { encoding: 'utf8' } );
    }
} else if (sql_argument == 'setup') {
    console.log('====Creating the database schema====');
    sql_commands.unshift('createdb -O ' + config.database.name + ' ' + config.database.name);
    sql_commands.unshift('dropdb ' + config.database.user);
    series(sql_commands);
} else if (sql_argument == 'testdata') {
    console.log('====Populating the database with testing data====');
    series(test_sql_commands);
} else {
    console.log('This script needs an argument, this can be either update or setup.');
    console.log('setup: creates the database');
    console.log('update: migrates the database');
    return;
}

